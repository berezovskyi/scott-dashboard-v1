/*******************************************************************************
 * Copyright (c) 2012 IBM Corporation and others.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Russell Boykin       - initial API and implementation
 *     Alberto Giammaria    - initial API and implementation
 *     Chris Peters         - initial API and implementation
 *     Gianluca Bernardini  - initial API and implementation
 *       Sam Padgett          - initial API and implementation
 *     Michael Fiedler      - adapted for OSLC4J
 *     Jad El-khoury        - initial implementation of code generator (422448)
 *     Matthieu Helleboid   - Support for multiple Service Providers.
 *     Anass Radouani       - Support for multiple Service Providers.
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/

package se.kth.vis.resources;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.Iterator;
import javax.servlet.http.HttpServletRequest;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import javax.ws.rs.core.UriBuilder;

import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
import org.eclipse.lyo.oslc4j.core.exception.OslcCoreApplicationException;
import org.eclipse.lyo.oslc4j.core.annotation.OslcAllowedValue;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDescription;
import org.eclipse.lyo.oslc4j.core.annotation.OslcMemberProperty;
import org.eclipse.lyo.oslc4j.core.annotation.OslcName;
import org.eclipse.lyo.oslc4j.core.annotation.OslcNamespace;
import org.eclipse.lyo.oslc4j.core.annotation.OslcOccurs;
import org.eclipse.lyo.oslc4j.core.annotation.OslcPropertyDefinition;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRange;
import org.eclipse.lyo.oslc4j.core.annotation.OslcReadOnly;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRepresentation;
import org.eclipse.lyo.oslc4j.core.annotation.OslcResourceShape;
import org.eclipse.lyo.oslc4j.core.annotation.OslcTitle;
import org.eclipse.lyo.oslc4j.core.annotation.OslcValueType;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
import org.eclipse.lyo.oslc4j.core.model.Link;
import org.eclipse.lyo.oslc4j.core.model.Occurs;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.Representation;
import org.eclipse.lyo.oslc4j.core.model.ValueType;
import org.eclipse.lyo.oslc4j.core.model.ResourceShape;
import org.eclipse.lyo.oslc4j.core.model.ResourceShapeFactory;

import se.kth.vis.resources.Nsp1Constants;
import se.kth.vis.resources.Nsp1Constants;

// Start of user code imports
// End of user code

// Start of user code preClassCode
// End of user code

// Start of user code classAnnotations
// End of user code
@OslcNamespace(Nsp1Constants.WAREHOUSE_NAMSPACE)
@OslcName(Nsp1Constants.ACTION)
@OslcResourceShape(title = "Action Resource Shape", describes = Nsp1Constants.TYPE_ACTION)
public class Action
    extends AbstractResource
    implements IAction
{
    // Start of user code attributeAnnotation:startTime
    // End of user code
    private Integer startTime;
    // Start of user code attributeAnnotation:endTime
    // End of user code
    private Integer endTime;
    // Start of user code attributeAnnotation:complete
    // End of user code
    private Boolean complete;
    // Start of user code attributeAnnotation:chargeCost
    // End of user code
    private Integer chargeCost;
    // Start of user code attributeAnnotation:precondition
    // End of user code
    private Boolean precondition;
    // Start of user code attributeAnnotation:effect
    // End of user code
    private Boolean effect;
    
    // Start of user code classAttributes
    // End of user code
    // Start of user code classMethods
    // End of user code
    public Action()
           throws URISyntaxException
    {
        super();
    
        // Start of user code constructor1
        // End of user code
    }
    
    public Action(final URI about)
           throws URISyntaxException
    {
        super(about);
    
        // Start of user code constructor2
        // End of user code
    }
    
    
    public static ResourceShape createResourceShape() throws OslcCoreApplicationException, URISyntaxException {
        return ResourceShapeFactory.createResourceShape(OSLC4JUtils.getServletURI(),
        OslcConstants.PATH_RESOURCE_SHAPES,
        Nsp1Constants.PATH_ACTION,
        Action.class);
    }
    
    
    public String toString()
    {
        return toString(false);
    }
    
    public String toString(boolean asLocalResource)
    {
        String result = "";
        // Start of user code toString_init
        // End of user code
    
        if (asLocalResource) {
            result = result + "{a Local Action Resource} - update Action.toString() to present resource as desired.";
            // Start of user code toString_bodyForLocalResource
            // End of user code
        }
        else {
            result = getAbout().toString();
        }
    
        // Start of user code toString_finalize
        // End of user code
    
        return result;
    }
    
    public String toHtml()
    {
        return toHtml(false);
    }
    
    public String toHtml(boolean asLocalResource)
    {
        String result = "";
        // Start of user code toHtml_init
        // End of user code
    
        if (asLocalResource) {
            result = toString(true);
            // Start of user code toHtml_bodyForLocalResource
            // End of user code
        }
        else {
            result = "<a href=\"" + getAbout() + "\" class=\"oslc-resource-link\">" + toString() + "</a>";
        }
    
        // Start of user code toHtml_finalize
        // End of user code
    
        return result;
    }
    
    
    // Start of user code getterAnnotation:startTime
    // End of user code
    @OslcName("startTime")
    @OslcPropertyDefinition(Nsp1Constants.WAREHOUSE_NAMSPACE + "startTime")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.Integer)
    @OslcReadOnly(false)
    public Integer getStartTime()
    {
        // Start of user code getterInit:startTime
        // End of user code
        return startTime;
    }
    
    // Start of user code getterAnnotation:endTime
    // End of user code
    @OslcName("endTime")
    @OslcPropertyDefinition(Nsp1Constants.WAREHOUSE_NAMSPACE + "endTime")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.Integer)
    @OslcReadOnly(false)
    public Integer getEndTime()
    {
        // Start of user code getterInit:endTime
        // End of user code
        return endTime;
    }
    
    // Start of user code getterAnnotation:complete
    // End of user code
    @OslcName("complete")
    @OslcPropertyDefinition(Nsp1Constants.WAREHOUSE_NAMSPACE + "complete")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.Boolean)
    @OslcReadOnly(false)
    public Boolean isComplete()
    {
        // Start of user code getterInit:complete
        // End of user code
        return complete;
    }
    
    // Start of user code getterAnnotation:chargeCost
    // End of user code
    @OslcName("chargeCost")
    @OslcPropertyDefinition(Nsp1Constants.WAREHOUSE_NAMSPACE + "chargeCost")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.Integer)
    @OslcReadOnly(false)
    public Integer getChargeCost()
    {
        // Start of user code getterInit:chargeCost
        // End of user code
        return chargeCost;
    }
    
    // Start of user code getterAnnotation:precondition
    // End of user code
    @OslcName("precondition")
    @OslcPropertyDefinition(Nsp1Constants.WAREHOUSE_NAMSPACE + "precondition")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.Boolean)
    @OslcReadOnly(false)
    public Boolean isPrecondition()
    {
        // Start of user code getterInit:precondition
        // End of user code
        return precondition;
    }
    
    // Start of user code getterAnnotation:effect
    // End of user code
    @OslcName("effect")
    @OslcPropertyDefinition(Nsp1Constants.WAREHOUSE_NAMSPACE + "effect")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.Boolean)
    @OslcReadOnly(false)
    public Boolean isEffect()
    {
        // Start of user code getterInit:effect
        // End of user code
        return effect;
    }
    
    
    // Start of user code setterAnnotation:startTime
    // End of user code
    public void setStartTime(final Integer startTime )
    {
        // Start of user code setterInit:startTime
        // End of user code
        this.startTime = startTime;
    
        // Start of user code setterFinalize:startTime
        // End of user code
    }
    
    // Start of user code setterAnnotation:endTime
    // End of user code
    public void setEndTime(final Integer endTime )
    {
        // Start of user code setterInit:endTime
        // End of user code
        this.endTime = endTime;
    
        // Start of user code setterFinalize:endTime
        // End of user code
    }
    
    // Start of user code setterAnnotation:complete
    // End of user code
    public void setComplete(final Boolean complete )
    {
        // Start of user code setterInit:complete
        // End of user code
        this.complete = complete;
    
        // Start of user code setterFinalize:complete
        // End of user code
    }
    
    // Start of user code setterAnnotation:chargeCost
    // End of user code
    public void setChargeCost(final Integer chargeCost )
    {
        // Start of user code setterInit:chargeCost
        // End of user code
        this.chargeCost = chargeCost;
    
        // Start of user code setterFinalize:chargeCost
        // End of user code
    }
    
    // Start of user code setterAnnotation:precondition
    // End of user code
    public void setPrecondition(final Boolean precondition )
    {
        // Start of user code setterInit:precondition
        // End of user code
        this.precondition = precondition;
    
        // Start of user code setterFinalize:precondition
        // End of user code
    }
    
    // Start of user code setterAnnotation:effect
    // End of user code
    public void setEffect(final Boolean effect )
    {
        // Start of user code setterInit:effect
        // End of user code
        this.effect = effect;
    
        // Start of user code setterFinalize:effect
        // End of user code
    }
    
    
    static public String startTimeToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:startTimeToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"startTime\">startTime: </LABEL>";
    
        // Start of user code "Mid:startTimeToHtmlForCreation(...)"
        // End of user code
    
        s= s + "<input name=\"startTime\" type=\"text\" style=\"width: 400px\" id=\"startTime\" >";
        // Start of user code "Finalize:startTimeToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String endTimeToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:endTimeToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"endTime\">endTime: </LABEL>";
    
        // Start of user code "Mid:endTimeToHtmlForCreation(...)"
        // End of user code
    
        s= s + "<input name=\"endTime\" type=\"text\" style=\"width: 400px\" id=\"endTime\" >";
        // Start of user code "Finalize:endTimeToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String completeToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:completeToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"complete\">complete: </LABEL>";
    
        // Start of user code "Mid:completeToHtmlForCreation(...)"
        // End of user code
    
        s= s + "<input name=\"complete\" type=\"radio\" value=\"true\">True<input name=\"complete\" type=\"radio\" value=\"false\">False";
        // Start of user code "Finalize:completeToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String chargeCostToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:chargeCostToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"chargeCost\">chargeCost: </LABEL>";
    
        // Start of user code "Mid:chargeCostToHtmlForCreation(...)"
        // End of user code
    
        s= s + "<input name=\"chargeCost\" type=\"text\" style=\"width: 400px\" id=\"chargeCost\" >";
        // Start of user code "Finalize:chargeCostToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String preconditionToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:preconditionToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"precondition\">precondition: </LABEL>";
    
        // Start of user code "Mid:preconditionToHtmlForCreation(...)"
        // End of user code
    
        s= s + "<input name=\"precondition\" type=\"radio\" value=\"true\">True<input name=\"precondition\" type=\"radio\" value=\"false\">False";
        // Start of user code "Finalize:preconditionToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String effectToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:effectToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"effect\">effect: </LABEL>";
    
        // Start of user code "Mid:effectToHtmlForCreation(...)"
        // End of user code
    
        s= s + "<input name=\"effect\" type=\"radio\" value=\"true\">True<input name=\"effect\" type=\"radio\" value=\"false\">False";
        // Start of user code "Finalize:effectToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    
    public String startTimeToHtml()
    {
        String s = "";
    
        // Start of user code startTimetoHtml_mid
        // End of user code
    
        try {
            if (startTime == null) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + startTime.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code startTimetoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String endTimeToHtml()
    {
        String s = "";
    
        // Start of user code endTimetoHtml_mid
        // End of user code
    
        try {
            if (endTime == null) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + endTime.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code endTimetoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String completeToHtml()
    {
        String s = "";
    
        // Start of user code completetoHtml_mid
        // End of user code
    
        try {
            if (complete == null) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + complete.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code completetoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String chargeCostToHtml()
    {
        String s = "";
    
        // Start of user code chargeCosttoHtml_mid
        // End of user code
    
        try {
            if (chargeCost == null) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + chargeCost.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code chargeCosttoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String preconditionToHtml()
    {
        String s = "";
    
        // Start of user code preconditiontoHtml_mid
        // End of user code
    
        try {
            if (precondition == null) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + precondition.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code preconditiontoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String effectToHtml()
    {
        String s = "";
    
        // Start of user code effecttoHtml_mid
        // End of user code
    
        try {
            if (effect == null) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + effect.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code effecttoHtml_finalize
        // End of user code
    
        return s;
    }
    
    
}
