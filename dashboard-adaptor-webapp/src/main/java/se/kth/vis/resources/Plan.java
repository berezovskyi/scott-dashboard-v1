/*******************************************************************************
 * Copyright (c) 2012 IBM Corporation and others.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Russell Boykin       - initial API and implementation
 *     Alberto Giammaria    - initial API and implementation
 *     Chris Peters         - initial API and implementation
 *     Gianluca Bernardini  - initial API and implementation
 *       Sam Padgett          - initial API and implementation
 *     Michael Fiedler      - adapted for OSLC4J
 *     Jad El-khoury        - initial implementation of code generator (422448)
 *     Matthieu Helleboid   - Support for multiple Service Providers.
 *     Anass Radouani       - Support for multiple Service Providers.
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/

package se.kth.vis.resources;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.Iterator;
import javax.servlet.http.HttpServletRequest;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import javax.ws.rs.core.UriBuilder;

import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
import org.eclipse.lyo.oslc4j.core.exception.OslcCoreApplicationException;
import org.eclipse.lyo.oslc4j.core.annotation.OslcAllowedValue;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDescription;
import org.eclipse.lyo.oslc4j.core.annotation.OslcMemberProperty;
import org.eclipse.lyo.oslc4j.core.annotation.OslcName;
import org.eclipse.lyo.oslc4j.core.annotation.OslcNamespace;
import org.eclipse.lyo.oslc4j.core.annotation.OslcOccurs;
import org.eclipse.lyo.oslc4j.core.annotation.OslcPropertyDefinition;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRange;
import org.eclipse.lyo.oslc4j.core.annotation.OslcReadOnly;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRepresentation;
import org.eclipse.lyo.oslc4j.core.annotation.OslcResourceShape;
import org.eclipse.lyo.oslc4j.core.annotation.OslcTitle;
import org.eclipse.lyo.oslc4j.core.annotation.OslcValueType;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
import org.eclipse.lyo.oslc4j.core.model.Link;
import org.eclipse.lyo.oslc4j.core.model.Occurs;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.Representation;
import org.eclipse.lyo.oslc4j.core.model.ValueType;
import org.eclipse.lyo.oslc4j.core.model.ResourceShape;
import org.eclipse.lyo.oslc4j.core.model.ResourceShapeFactory;

import se.kth.vis.resources.Nsp1Constants;
import se.kth.vis.resources.Nsp1Constants;
import se.kth.vis.resources.PlannedAction;
import se.kth.vis.resources.Robot;

// Start of user code imports
// End of user code

// Start of user code preClassCode
// End of user code

// Start of user code classAnnotations
// End of user code
@OslcNamespace(Nsp1Constants.WAREHOUSE_NAMSPACE)
@OslcName(Nsp1Constants.PLAN)
@OslcResourceShape(title = "Plan Resource Shape", describes = Nsp1Constants.TYPE_PLAN)
public class Plan
    extends AbstractResource
    implements IPlan
{
    // Start of user code attributeAnnotation:has
    // End of user code
    private HashSet<Link> has = new HashSet<Link>();
    // Start of user code attributeAnnotation:performedBy
    // End of user code
    private HashSet<Link> performedBy = new HashSet<Link>();
    
    // Start of user code classAttributes
    // End of user code
    // Start of user code classMethods
    // End of user code
    public Plan()
           throws URISyntaxException
    {
        super();
    
        // Start of user code constructor1
        // End of user code
    }
    
    public Plan(final URI about)
           throws URISyntaxException
    {
        super(about);
    
        // Start of user code constructor2
        // End of user code
    }
    
    
    public static ResourceShape createResourceShape() throws OslcCoreApplicationException, URISyntaxException {
        return ResourceShapeFactory.createResourceShape(OSLC4JUtils.getServletURI(),
        OslcConstants.PATH_RESOURCE_SHAPES,
        Nsp1Constants.PATH_PLAN,
        Plan.class);
    }
    
    
    public String toString()
    {
        return toString(false);
    }
    
    public String toString(boolean asLocalResource)
    {
        String result = "";
        // Start of user code toString_init
        // End of user code
    
        if (asLocalResource) {
            result = result + "{a Local Plan Resource} - update Plan.toString() to present resource as desired.";
            // Start of user code toString_bodyForLocalResource
            // End of user code
        }
        else {
            result = getAbout().toString();
        }
    
        // Start of user code toString_finalize
        // End of user code
    
        return result;
    }
    
    public String toHtml()
    {
        return toHtml(false);
    }
    
    public String toHtml(boolean asLocalResource)
    {
        String result = "";
        // Start of user code toHtml_init
        // End of user code
    
        if (asLocalResource) {
            result = toString(true);
            // Start of user code toHtml_bodyForLocalResource
            // End of user code
        }
        else {
            result = "<a href=\"" + getAbout() + "\" class=\"oslc-resource-link\">" + toString() + "</a>";
        }
    
        // Start of user code toHtml_finalize
        // End of user code
    
        return result;
    }
    
    public void addHas(final Link has)
    {
        this.has.add(has);
    }
    
    public void addPerformedBy(final Link performedBy)
    {
        this.performedBy.add(performedBy);
    }
    
    
    // Start of user code getterAnnotation:has
    // End of user code
    @OslcName("has")
    @OslcPropertyDefinition(Nsp1Constants.WAREHOUSE_NAMSPACE + "has")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({Nsp1Constants.TYPE_PLANNEDACTION})
    @OslcReadOnly(false)
    public HashSet<Link> getHas()
    {
        // Start of user code getterInit:has
        // End of user code
        return has;
    }
    
    // Start of user code getterAnnotation:performedBy
    // End of user code
    @OslcName("performedBy")
    @OslcPropertyDefinition(Nsp1Constants.WAREHOUSE_NAMSPACE + "performedBy")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({Nsp1Constants.TYPE_ROBOT})
    @OslcReadOnly(false)
    public HashSet<Link> getPerformedBy()
    {
        // Start of user code getterInit:performedBy
        // End of user code
        return performedBy;
    }
    
    
    // Start of user code setterAnnotation:has
    // End of user code
    public void setHas(final HashSet<Link> has )
    {
        // Start of user code setterInit:has
        // End of user code
        this.has.clear();
        if (has != null)
        {
            this.has.addAll(has);
        }
    
        // Start of user code setterFinalize:has
        // End of user code
    }
    
    // Start of user code setterAnnotation:performedBy
    // End of user code
    public void setPerformedBy(final HashSet<Link> performedBy )
    {
        // Start of user code setterInit:performedBy
        // End of user code
        this.performedBy.clear();
        if (performedBy != null)
        {
            this.performedBy.addAll(performedBy);
        }
    
        // Start of user code setterFinalize:performedBy
        // End of user code
    }
    
    
    static public String hasToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:hasToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"has\">has: </LABEL>";
    
        // Start of user code "Mid:hasToHtmlForCreation(...)"
        // End of user code
    
        // Start of user code "Finalize:hasToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String performedByToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:performedByToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"performedBy\">performedBy: </LABEL>";
    
        // Start of user code "Mid:performedByToHtmlForCreation(...)"
        // End of user code
    
        // Start of user code "Finalize:performedByToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    
    public String hasToHtml()
    {
        String s = "";
    
        // Start of user code hastoHtml_mid
        // End of user code
    
        try {
            s = s + "<ul>";
            for(Link next : has) {
                s = s + "<li>";
                s = s + (new PlannedAction (next.getValue())).toHtml(false);
                s = s + "</li>";
            }
            s = s + "</ul>";
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code hastoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String performedByToHtml()
    {
        String s = "";
    
        // Start of user code performedBytoHtml_mid
        // End of user code
    
        try {
            s = s + "<ul>";
            for(Link next : performedBy) {
                s = s + "<li>";
                s = s + (new Robot (next.getValue())).toHtml(false);
                s = s + "</li>";
            }
            s = s + "</ul>";
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code performedBytoHtml_finalize
        // End of user code
    
        return s;
    }
    
    
}
